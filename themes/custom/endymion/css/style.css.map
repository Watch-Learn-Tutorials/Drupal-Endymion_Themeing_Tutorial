{"version":3,"sources":["_reset.scss","_globals.scss","susy/output/support/_rem.scss","susy/output/support/_clearfix.scss","_header.scss","susy/output/shared/_direction.scss","susy/language/susy/_span.scss"],"names":[],"mappings":"AACA,2ZAA2Z,SAAU,eAAgB,aAAc,wBAAyB,SAAU,SAAU,CAAC,8EAA8E,aAAc,CAAC,KAAK,aAAc,CAAC,MAAM,eAAgB,CAAC,aAAa,WAAY,CAAC,oDAAoD,YAAa,CAAC,MAAM,yBAA0B,gBAAiB,CAAE,KCIpwB,cAAgB,CACnB,KAGG,mCACA,sCAAsB,CACzB,EAGG,qBAAuB,CAC1B,WCIG,gBDDyB,CAD7B,iBELM,YACA,cACA,UAAY,CACb,iBFeD,UACA,gBAAkB,CACrB,iBAMG,aAAe,CAClB,gBAMG,WACA,YACA,cACA,SACA,kBACA,WAAa,CAChB,KAGG,UAAY,CACf,aGtDG,aACA,WACA,6DAA8D,CACjE,MFeG,gBAAA,UGA4D,CDbhE,UAGQ,cAAgB,CACnB,SAID,gBFKA,gBIwIoB,CF9IxB,YAIQ,UAAY,CAJpB,WAOQ,cACA,YACA,qBACA,cAAgB,CAVxB,eAaQ,yBAA2B,CAC9B,YAKG,gBACA,cAAgB,CACnB,mBAID,iBACA,SACA,wBACA,aACA,UAAY,CACf,OAGG,WAAa,CAChB,SAGG,WAAa,CAChB,iBAGG,cACA,uBACA,aACA,SAAW,CACd,eAGG,iBACA,YACA,SACA,2BACA,sBAAwB,CAC3B","file":"style.css","sourcesContent":["/* Eric Meyer's Reset CSS v2.0 - http://cssreset.com */\nhtml,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:baseline;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}","/* =======================================================================\n## ++ Globals\n========================================================================== */\n\nhtml {\n    font-size: 100%;\n}\n\nbody {\n    -webkit-font-smoothing: antialiased;\n    background-color: rgba(43, 14, 124, 0.794);\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.container {\n    @include container(1100px);\n}\n\n\n/* =======================================================================\n## ++ Cleafix\n========================================================================== */\n\n\n/* float clearing for IE6 */\n\n* html .clearfix {\n    height: 1%;\n    overflow: visible;\n}\n\n\n/* float clearing for IE7 */\n\n*+html .clearfix {\n    min-height: 1%;\n}\n\n\n/* float clearing for everyone else */\n\n.clearfix:after {\n    clear: both;\n    content: \".\";\n    display: block;\n    height: 0;\n    visibility: hidden;\n    font-size: 0;\n}\n\n.clr {\n    clear: both;\n}","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n",".main-header {\r\n    height: 300px;\r\n    width: 100%;\r\n    background: url(../images/theHero.jpg) no-repeat center center;\r\n}\r\n\r\n.logo {\r\n    @include span(2);\r\n    img {\r\n        max-width: 100%;\r\n    }\r\n}\r\n\r\n.mainNav {\r\n    margin-top: 10px;\r\n    @include span(5 last);\r\n    li {\r\n        float: left;\r\n    }\r\n    a {\r\n        display: block;\r\n        color: white;\r\n        text-decoration: none;\r\n        padding: 0 10px;\r\n    }\r\n    &:hover {\r\n        text-decoration: underline;\r\n    }\r\n}\r\n\r\n.mylogo {\r\n    img {\r\n        max-height: 400%;\r\n        max-width: 400%;\r\n    }\r\n}\r\n\r\n.heading-container {\r\n    display: relative;\r\n    margin: 0;\r\n    border: 6px solid purple;\r\n    height: 250px;\r\n    width: 100%;\r\n}\r\n\r\na:link {\r\n    color: white;\r\n}\r\n\r\n:visited {\r\n    color: white;\r\n}\r\n\r\n.main-navigation {\r\n    display: fixed;\r\n    border: 6px solid white;\r\n    height: 100px;\r\n    width: 10%;\r\n}\r\n\r\n.nav-container {\r\n    display: relative;\r\n    height: 80px;\r\n    width: 7%;\r\n    margin: -50px 0px 0px 840px;\r\n    border: 6px solid black;\r\n}\r\n\r\n// .main-header {\r\n//     display: fixed;\r\n//     border: 6px solid red;\r\n//     height: 300px;\r\n//     width: 100%;\r\n//     background: url(../images/theHero.jpg) no-repeat center center;\r\n// }\r\n// .logo {\r\n//     @include span(2);\r\n//     img {\r\n//         max-width: 100%;\r\n//     }\r\n// }\r\n// .mainNav {\r\n//     margin-top: 10px;\r\n//     @include span(5 last);\r\n//     li {\r\n//         float: left;\r\n//     }\r\n//     a {\r\n//         display: block;\r\n//         color: white;\r\n//         text-decoration: none;\r\n//         padding: 0 10px;\r\n//     }\r\n//     &:hover {\r\n//         text-decoration: underline;\r\n//     }\r\n// }\r\n// .mylogo {\r\n//     img {\r\n//         max-height: 400%;\r\n//         max-width: 400%;\r\n//     }\r\n// }\r\n// .heading-container {\r\n//     display: relative;\r\n//     margin: 0;\r\n//     border: 6px solid purple;\r\n//     height: 250px;\r\n//     width: 100%;\r\n// }\r\n// a:link {\r\n//     color: white;\r\n// }\r\n// :visited {\r\n//     color: white;\r\n// }\r\n// .main-navigation {\r\n//     display: fixed;\r\n//     border: 6px solid white;\r\n//     height: 100px;\r\n//     width: 10%;\r\n// }\r\n// .nav-container {\r\n//     display: relative;\r\n//     height: 80px;\r\n//     width: 7%;\r\n//     margin: -50px 0px 0px 840px;\r\n//     border: 6px solid black;\r\n// }","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n"]}